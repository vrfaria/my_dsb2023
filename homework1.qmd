---
title: "Homerwork 1"
author: "VICTOR RIOS FARIA"
date: 2023-05-14
format: 
  docx: default
  html:
    toc: true
    toc_float: true
    code-fold: true
editor: visual
---

```{r}
#| label: load-libraries
#| echo: false # This option disables the printing of code (only output is displayed).
#| message: false
#| warning: false

library(tidyverse)
library(nycflights13)
library(skimr)
library(dplyr)
library(ggplot2)

```

# Data Manipulation

## Problem 1: Use logical operators to find flights that:

```         
-   Had an arrival delay of two or more hours (\> 120 minutes)
-   Flew to Houston (IAH or HOU)
-   Were operated by United (`UA`), American (`AA`), or Delta (`DL`)
-   Departed in summer (July, August, and September)
-   Arrived more than two hours late, but didn't leave late
-   Were delayed by at least an hour, but made up over 30 minutes in flight
```

```{r}
#| label: problem-1

# Had an arrival delay of two or more hours (> 120 minutes)

flights %>%
  filter(arr_delay>=120) #filter flights with arr_delay greater than or equal to 120 miutes

# Flew to Houston (IAH or HOU)

flights %>%
  filter(dest == "IAH" | dest == "HOU") #filter flights that flew to either IAH or HOU

# Were operated by United (`UA`), American (`AA`), or Delta (`DL`)

flights %>%
  filter(carrier == "UA" | carrier == "AA" | carrier =="DL") #filter flights operated by the assigned carriers

# Departed in summer (July, August, and September)

flights %>%
  filter(month == 7| month == 8 | month == 9) #filter flights that departed in the months of July, August or September
  
  
# Arrived more than two hours late, but didn't leave late

flights %>%
  filter(arr_delay>120) %>% #filter flights that arrived more than 2h late and pass this datastream through
  filter(dep_delay<=0) #filter flights that didn't leave late among those that were more than 2 hours late


# Were delayed by at least an hour, but made up over 30 minutes in flight

flights %>%
  filter(dep_delay>=60) %>% #filter flights that departed at least 1h late
  filter(dep_delay-arr_delay >= 30) #filter flights that made up over 30 minutes in flight
```

## Problem 2: What months had the highest and lowest proportion of cancelled flights? Interpret any seasonal patterns. To determine if a flight was cancelled use the following code

<!-- -->

```         
flights %>% 
  filter(is.na(dep_time)) 
```

```{r}
#| label: problem-2

# What months had the highest and lowest % of cancelled flights?

flights %>%
  mutate(cancelled = ifelse(is.na(dep_time),1,0)) %>% #creates a new field that hold a value of 1 if the flight was cancelled or 0 if it was not
  group_by(month) %>% #group the data by the month to get aggregate statistics after
  summarise(cancelled_flights_perc = mean(cancelled)) %>% #gets the average of the cancelled field, which is equal the % of flights cancelled
  arrange(cancelled_flights_perc) %>% #sort the months in ascending order of % of flights cancelled
  slice(1,12) #selects the months with the least and the most % of flights cancelled, respectivelly
```

``` {(cancelled_flights_perc)}
```

## Problem 3: What plane (specified by the `tailnum` variable) traveled the most times from New York City airports in 2013? Please `left_join()` the resulting table with the table `planes` (also included in the `nycflights13` package).

For the plane with the greatest number of flights and that had more than 50 seats, please create a table where it flew to during 2013.

```{r}

#| label: problem-3

# What plane traveled the most times from New York City airports in 2013?


flights %>%
  filter(!is.na(tailnum) & dep_time>0)%>% #filters flights that have an assigned tailnum and were not cancelled
  group_by(tailnum) %>% #groups the data by the tailnum
  summarise(flights=n()) %>% #counts the number of flights departing from New York City per tailnum
  arrange(desc(flights)) %>% #orders the data on descending order of number of flights
  slice(1) %>% #gets the airplane that traveled the most times from New York City airports in 2013
  left_join(planes, by = "tailnum") #joins the two tables to get the airplane information from the table "planes". However, we observe that this specific airplane has no information stored in the "planes" table

```

## Problem 4: The `nycflights13` package includes a table (`weather`) that describes the weather during 2013. Use that table to answer the following questions:

```         
-   What is the distribution of temperature (`temp`) in July 2013? Identify any important outliers in terms of the `wind_speed` variable.
-   What is the relationship between `dewp` and `humid`?
-   What is the relationship between `precip` and `visib`?
```

```{r}

#| label: problem-4

# What is the distribution of temperature (`temp`) in July 2013? 

weather_july <- weather %>% filter(month == 7) # filters the data for the month of July and creates a new dataset with it
ggplot(weather_july, aes(x = temp)) + # creates a plot using the temperature variable
  geom_histogram(binwidth = 2) # sets the plot as a histogram with the given bin width, in which one can observe the temperature distribution to have its peak in the range of 75-77 degrees F

# Identify any important outliers in terms of the `wind_speed` variable.
ggplot(weather_july, aes(x = wind_speed)) + # creates a plot using the wind speed variable
  geom_boxplot() # sets the plot as a boxplot, from which we can observe there are 3 outliers in terms of wind speed
weather_july %>%
  arrange(desc(wind_speed)) %>% # sort the data in descending order of wind speed
  slice(1:3) # get the first three entries, that represent the 3 outliers found in the boxplot

# What is the relationship between `dewp` and `humid`?

ggplot(weather,aes(x=dewp, y=humid)) +
  geom_point() # creates a scatter plot with dewp in the x axis and humid in the y axis, where one can observe a positive correlation between the two variables, suggesting that an increase in humidity leads to an increased dew point
weather %>%
  filter(!is.na(dewp) & !is.na(humid)) %>% # filters only observations with valid values for both dewp and humid
  summarise(correlation = cor(dewp, humid)) # calculates the correlation between the two variables, confirming what has been observed in the scatter plot before

# What is the relationship between `precip` and `visib`?

ggplot(weather,aes(x=precip, y=visib)) +
  geom_point() # creates a scatter plot with precip in the x axis and visib in the y axis, where one cannnot observe a clear correlation between the two variables, suggesting that preciptation is not a factor that affects visibility
weather %>%
  filter(!is.na(precip) & !is.na(visib)) %>% # filters only observations with valid values for both precip and visib
  summarise(correlation = cor(precip, visib)) # calculates the correlation between the two variables, pointing out a slightly negative correlation, suggesting that preciptation reduces visibility

```

## Problem 5: Use the `flights` and `planes` tables to answer the following questions:

```         
-   How many planes have a missing date of manufacture?
-   What are the five most common manufacturers?
-   Has the distribution of manufacturer changed over time as reflected by the airplanes flying from NYC in 2013? (Hint: you may need to use case_when() to recode the manufacturer name and collapse rare vendors into a category called Other.)
```

```{r}

#| label: problem-5

# How many planes have a missing date of manufacture?

planes %>%
  filter(is.na(year)) %>% # filters all observations with no information about the year of manufacture
  summarise(planes_missing_date=n_distinct(tailnum)) # counts how many different planes have the date of manufacture information missing


# What are the five most common manufacturers?

planes_corrected_manufacturer <- planes %>%
  mutate(manufacturer=if_else(manufacturer=="AIRBUS","AIRBUS INDUSTRIE",manufacturer)) %>% # consolidates 2 different spellings for airbus into a single one
  mutate(manufacturer=if_else(manufacturer=="MCDONNELL DOUGLAS AIRCRAFT CO" | manufacturer=="MCDONNELL DOUGLAS CORPORATION","MCDONNELL DOUGLAS",manufacturer)) #consolidates 3 different spellings for McDonnell Douglas into a single one

planes_corrected_manufacturer %>%
  group_by(manufacturer) %>% # groups the data by manufacturers
  summarise(planesnumber=n_distinct(tailnum)) %>% # counts how many different planes each manufactures has manufactured among those in the datastream
  arrange(desc(planesnumber)) %>% # sorts the data in descending order of number of planes manufactured
  slice(1:5) #gets the five most common manufacturers and the number of planes manufactured by each of them

# Has the distribution of manufacturer changed over time as reflected by the airplanes flying from NYC in 2013?

flightplanes <- left_join(flights, planes_corrected_manufacturer, by = "tailnum") #creates a new datastream by joining flights and planes data

flightplanes %>%
  filter(!is.na(dep_time)) %>% # filters out any cancelled flight
  mutate(manufacturer = if_else(manufacturer %in% c("AIRBUS INDUSTRIE", "EMBRAER", "BOEING", "MCDONNELL DOUGLAS", "BOMBARDIER INC", "NA"), manufacturer, "OTHERS")) %>% #aggregates all the smaller manufacturers into "OTHERS"
  group_by(manufacturer, month) %>% # groups the data by manufacturers
  summarise(flightsnumber = n()) %>% # counts how many flights were made with planes manufactured by each manufacturer
  ggplot(aes(x = month, y = flightsnumber, fill = manufacturer)) + # creates a plot showing the number of flights per month per manufacturer
  geom_bar(stat = "identity", position = "fill") + # sets the plot type as a bar plot that sums up to 100%
  labs(y = "Percentage of Flights") # renames the y-axis to show the proper measure
#the final graphic shows the percentage of flights per manufacturer each month, and one can observe that the number of "OTHERS" decreased over time, with a slight increase in both "BOMBARDIER INC" and "MCDONNELL DOUGLAS". The other 3 players oscilated from one month to another, but no significant trend over time can be observed

```

## Problem 6: Use the `flights` and `planes` tables to answer the following questions:

```         
-   What is the oldest plane (specified by the tailnum variable) that flew from New York City airports in 2013?
-   How many airplanes that flew from New York City are included in the planes table?
```

```{r}

#| label: problem-6

# What is the oldest plane (specified by the tailnum variable) that flew from New York City airports in 2013?

flightplanes %>%
  distinct(tailnum, .keep_all = TRUE) %>% # keeps only one observation per tailnum
  select(tailnum, year.y, type, manufacturer, model, engines, seats, speed, engine) %>% # drops all features that are not related to the plane
  arrange(year.y) %>% # sort all planes by ascending year of manufature
  slice(1) # get the oldest plane that flew from New York City airports in 2013

# How many airplanes that flew from New York City are included in the planes table?

flightplanes %>%
  semi_join(planes, by = "tailnum") %>% # filters only  travels made with with planes that has information in the planes table
  summarise(number_of_planes = n_distinct(tailnum)) # counts how many distinct airplanes flew from New York City that are included in the planes table

```

## Problem 7: Use the `nycflights13` to answer the following questions:

```         
-   What is the median arrival delay on a month-by-month basis in each airport?
-   For each airline, plot the median arrival delay for each month and origin airport.
```

```{r}

#| label: problem-7

# What is the median arrival delay on a month-by-month basis in each airport?

flights %>%
  filter(!is.na(arr_delay)) %>% # get rid of flights that have no information on the arrival delay
  group_by(month, origin) %>% # groups the data by month and origin to get the associated values after
  summarise(med_arr_delay=median(arr_delay)) %>% #gets the median arrival delay for each airport each month
  ggplot(aes(x=month, y=med_arr_delay, color=origin)) + # plot the results
  geom_line() # as a line plot

# For each airline, plot the median arrival delay for each month and origin airport

flights %>%
  filter(!is.na(arr_delay)) %>% # get rid of flights that have no information on the arrival delay
  group_by(month, origin, carrier) %>% # groups the data by month, origin and carrier to get the associated values after
  summarise(med_arr_delay=median(arr_delay)) %>% #gets the median arrival delay for each carrier in each airport each month
  ggplot(aes(x=month, y=med_arr_delay, color=origin)) + # plot the results
  geom_line() + # as a line plot
  facet_wrap(~ carrier) # with a separete plot for each carrier
  
```

## Problem 8: Let's take a closer look at what carriers service the route to San Francisco International (SFO). Join the `flights` and `airlines` tables and count which airlines flew the most to SFO. Produce a new dataframe, `fly_into_sfo` that contains three variables: the `name` of the airline, e.g., `United Air Lines Inc.` not `UA`, the count (number) of times it flew to SFO, and the `percent` of the trips that that particular airline flew to SFO.

```{r}

#| label: problem-8

# Which airlines flew the most to SFO?

flightsairlines <- left_join(flights, airlines, by = "carrier") # creates a new dataframe by joining the flights and airlines tables

fly_into_sfo <- flightsairlines %>% # creates the fly_into_sfo dataframe that will contain the information about which carriers flew to SFO, how many times and whaat % does it represent
  filter(!is.na(dep_time) & dest == "SFO") %>% # filters the original data to keep only flights to SFO that were not cancelled
  group_by(name) %>% # groups the data by the name of the airline
  summarise(number_of_flights = n()) %>% # counts how many times each airline flew to SFO
  mutate(percentage_of_flights = number_of_flights / sum(number_of_flights)) # calculates what is their market share on flights from New York City to SFO

```

And here is some bonus ggplot code to plot your dataframe

```{r}
#| label: ggplot-flights-toSFO
#| message: false
#| warning: false

fly_into_sfo %>% 
  
  # sort 'name' of airline by the numbers it times to flew to SFO
  mutate(name = fct_reorder(name, number_of_flights)) %>% 
  
  ggplot() +
  
  aes(x = number_of_flights, 
      y = name) +
  
  # a simple bar/column plot
  geom_col() +
  
  # add labels, so each bar shows the % of total flights 
  geom_text(aes(label = paste0(round(percentage_of_flights*100, 1), "%")),
             hjust = 1, 
             colour = "white", 
             size = 5)+
  
  # add labels to help our audience  
  labs(title="Which airline dominates the NYC to SFO route?", 
       subtitle = "as % of total flights in 2013",
       x= "Number of flights",
       y= NULL) +
  
  theme_minimal() + 
  
  # change the theme-- i just googled those , but you can use the ggThemeAssist add-in
  # https://cran.r-project.org/web/packages/ggThemeAssist/index.html
  
  theme(#
    # so title is left-aligned
    plot.title.position = "plot",
    
    # text in axes appears larger        
    axis.text = element_text(size=12),
    
    # title text is bigger
    plot.title = element_text(size=18)
      ) +

  # add one final layer of NULL, so if you comment out any lines
  # you never end up with a hanging `+` that awaits another ggplot layer
  NULL
 
 
```

## Problem 9: Let's take a look at cancellations of flights to SFO. We create a new dataframe `cancellations` as follows

```{r}

cancellations <- flights %>% 
  
  # just filter for destination == 'SFO'
  filter(dest == 'SFO') %>% 
  
  # a cancelled flight is one with no `dep_time` 
  filter(is.na(dep_time))


```

I want you to think how we would organise our data manipulation to create the following plot. No need to write the code, just explain in words how you would go about it.

![](images/sfo-cancellations.png)

```{r}

#| label: problem-9

# To reproduce the image above, I would go through the following steps:

#i) Use a left join to merge the cancellations dataframe with the airlines dataframe to get the airlines names used as a tag in the horizontal strip

#ii) Group the data by month, name and origin

#iii) Summarize the data to get a count of how many observations there is for each combination of month, name and origin

#iv) Call ggplot to create a plot,  setting x=month and y=count as the variables in the aesthetic (aes)

#v) Define the plot time as a bar plot using geom_bar()

#vi) Define a grid of plots using facet_grid(name ~ origin)

#vii) Use the labs function to add title and tags to the axes

#viii) Use the geom_text function to add the label to each bar

#ix) Use the theme function to adjust the axis and strip texts and the strip background


############################################################################

cancellations %>%
  left_join(airlines, by="carrier") %>%
  group_by(month, name, origin) %>%
  summarise(count = n())%>%
  ggplot(aes(x = month, y = count)) +
  geom_bar(stat = "identity") +
  facet_grid(name ~ origin) +
  labs(title = "Cancellations of flights to SFO by month carrier and airport origin",
       x = "Month",
       y = "Count of Cancelled Flights") +
  geom_text(aes(label = count), vjust = 1, color = "white", size = 1) +
  theme_minimal() +
  theme(axis.text = element_text(size = 6),
        strip.text = element_text(size = 4),
        strip.background = element_rect(fill = "lightgray", color = "gray", size = 1))
```

## Problem 10: On your own -- Hollywood Age Gap

The website https://hollywoodagegap.com is a record of *THE AGE DIFFERENCE IN YEARS BETWEEN MOVIE LOVE INTERESTS*. This is an informational site showing the age gap between movie love interests and the data follows certain rules:

-   The two (or more) actors play actual love interests (not just friends, coworkers, or some other non-romantic type of relationship)
-   The youngest of the two actors is at least 17 years old
-   No animated characters

The age gaps dataset includes "gender" columns, which always contain the values "man" or "woman". These values appear to indicate how the characters in each film identify and some of these values do not match how the actor identifies. We apologize if any characters are misgendered in the data!

The following is a data dictionary of the variables used

| variable            | class     | description                                                                                             |
|:--------------------|:----------|:--------------------------------------------------------------------------------------------------------|
| movie_name          | character | Name of the film                                                                                        |
| release_year        | integer   | Release year                                                                                            |
| director            | character | Director of the film                                                                                    |
| age_difference      | integer   | Age difference between the characters in whole years                                                    |
| couple_number       | integer   | An identifier for the couple in case multiple couples are listed for this film                          |
| actor_1\_name       | character | The name of the older actor in this couple                                                              |
| actor_2\_name       | character | The name of the younger actor in this couple                                                            |
| character_1\_gender | character | The gender of the older character, as identified by the person who submitted the data for this couple   |
| character_2\_gender | character | The gender of the younger character, as identified by the person who submitted the data for this couple |
| actor_1\_birthdate  | date      | The birthdate of the older member of the couple                                                         |
| actor_2\_birthdate  | date      | The birthdate of the younger member of the couple                                                       |
| actor_1\_age        | integer   | The age of the older actor when the film was released                                                   |
| actor_2\_age        | integer   | The age of the younger actor when the film was released                                                 |

```{r}

#| label: problem-10

library(DescTools)

age_gaps <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-14/age_gaps.csv')

# How is age_difference distributed? What's the 'typical' age_difference in movies?

age_gaps %>%
  ggplot(aes(x=age_difference)) +
  geom_histogram(binwidth = 2) # Through an histogram of age_difference, one can investigate its distribution and observe that it's concentrated in the region between 0 and 10, with a long tail to higher values. The typical age_difference, as per the highest bar in the histogram, is around 2 or 3 years.

age_gaps %>%
  summarise(upto5years = mean(age_difference <= 5)) # with this summarise call we can check that 35.8% of the age difference observations are equal to or less than 5 years

age_gaps %>%
  summarise(upto10years = mean(age_difference <= 10)) # with this summarise call we can check that 59.8% of the age difference observations are equal to or less than 10 years

age_gaps %>%
  summarise(upto20years = mean(age_difference <= 20)) # with this summarise call we can check that 86.8% of the age difference observations are equal to or less than 20 years

# How frequently does the "half plus seven" rule apply in this dataset?

age_gaps %>%
  mutate(half_plus_seven = if_else (actor_1_age/2 + 7 < actor_2_age,1,0)) %>% # uses the mutate function to create a dummy variable that takes the value of 1 if the half plus seven rule applies and 0 otherwise
  summarise(half_plus_seven_frequency = mean(half_plus_seven)) # takes the mean of the created dummy variable to get the % of observations to which the half plus seven rule applies - 68.8%

# Which movie has the greatest number of love interests?

age_gaps %>%
  group_by (movie_name) %>% # groups the data by the name of the movie
  summarise(love_interests = n()) %>% # counts how many love interests each movie has
  arrange(desc(love_interests)) %>% # sorts the data on descending order of number of love interests
  slice(1) # selects the movie with the most number of love interests, which is Love Actually

# Which actors/ actresses have the greatest number of love interests in this dataset?

love_interests_actor_1 <- age_gaps %>% # creates a new dataframe for the number of love interests for the actors/actrices in slot 1
  group_by (actor_1_name) %>% # groups the data by actor 1's name
  summarise (love_interests_1 = n()) # counts how many love interests each of those actors/actrices has

love_interests_actor_2 <- age_gaps %>% # creates a new dataframe for the number of love interests for the actors/actrices in slot 2
  group_by (actor_2_name) %>% # groups the data by actor 2's name
  summarise (love_interests_2 = n()) # counts how many love interests each of those actors/actrices has

full_join(love_interests_actor_1, love_interests_actor_2, by = c("actor_1_name" = "actor_2_name")) %>% # joins together the data from the two individual actors/actrices dataframes
  mutate_at(vars(love_interests_1, love_interests_2), ~replace(., is.na(.), 0)) %>% # replace any NA value (because the actor/actrice was absent in one of the previous dataframe) with 0
  mutate(total_love_interests = love_interests_1 + love_interests_2) %>% # calculates the total number of love interests, considering apparitions in both positions
  arrange(desc(total_love_interests)) %>% # sorts the data on descending order of number of total love interests
  slice(1:5) # selects the top 5 actor/actrice with the most number of love interests. Keanu Reeves, with 27 total love interests, leads the ranking, followed by Adam Sandler (20), Leonardo DiCaprio, Roger Moore and Sean Connery (17)


# Is the mean/median age difference staying constant over the years (1935 - 2022)?

age_gaps %>%
  group_by(release_year) %>% # groups the data by release year
  summarise(average_age_difference=mean(age_difference)) %>% # computes the average age difference for each year
  ggplot(aes(x=release_year,y=average_age_difference)) + # creates a plot of the average age difference x release year of the movie
  geom_point() + # defines the plot as a scatter plot
  geom_smooth(method = "lm" ,se = FALSE) # adds a linear trend line to the plot, from which we can see there is a downward slope, meaning that the average age difference went down throught years (got reduced by about 10 years over the 87-year range)

age_gaps %>%
  group_by(release_year) %>% # groups the data by release year
  summarise(average_age_difference=mean(age_difference)) %>% # computes the average age difference for each year
  summarise(correlation = cor(average_age_difference, release_year)) # double checks the existence of a negative correlation betwen release year and average age difference (-0.486, equivalent to an R2 of 0.236 in the trend line observed in the previous plot)

# How frequently does Hollywood depict same-gender love interests?

age_gaps %>%
  mutate(same_gender=if_else(character_1_gender==character_2_gender,1,0)) %>% # creates a dummy variable that takes the value of 1 if the love interest was between characters of the same gender and 0 otherwise
  summarise(same_gender_frequency=mean(same_gender)) # gets the frequency of same gender love interest among the dataset by computing the mean of the previously defined dummy variable. We can conclude that same gender love interests represents less than 2% of the observations

age_gaps %>%
  mutate(same_gender=if_else(character_1_gender==character_2_gender,1,0)) %>% # creates a dummy variable that takes the value of 1 if the love interest was between characters of the same gender and 0 otherwise
  group_by(release_year) %>% # groups the data by release year
  summarise(same_gender_frequency=mean(same_gender)) %>% # gets the frequency of same gender love interest each year
  ggplot(aes(x=release_year,y=same_gender_frequency)) + # creates a plot of the same gender love interest frequency x release year of the movie
  geom_point() # defines the plot as a scatter plot. From this plot, we can observe that same gender love interest appeared for the first time only in 1997, 62 years after the oldest record in the dataset

age_gaps %>%
  mutate(same_gender=if_else(character_1_gender==character_2_gender,1,0)) %>% # creates a dummy variable that takes the value of 1 if the love interest was between characters of the same gender and 0 otherwise
  group_by(release_year) %>% # groups the data by release year
  summarise(same_gender_frequency=mean(same_gender)) %>% # gets the frequency of same gender love interest each year
  slice(50:82) %>% # slices the dataset so it starts in 1990
  ggplot(aes(x=release_year,y=same_gender_frequency)) + # creates a plot of the same gender love interest frequency x release year of the movie
  geom_point() + # defines the plot as a scatter plot.
  geom_smooth(method = "lm" ,se = FALSE) # adds a linear trend line to the plot, from which we can see there is a upward slope, meaning that the same gender love interest has become for frequent since 1990

age_gaps %>%
  mutate(same_gender=if_else(character_1_gender==character_2_gender,1,0)) %>% # creates a dummy variable that takes the value of 1 if the love interest was between characters of the same gender and 0 otherwise
  group_by(character_1_gender) %>% # groups the data by character 1 gender
  summarise(same_gender_observations=sum(same_gender)) # gets the number of observations of same gender love interest per gender. From this table, we can observe that there is no significant difference between man-man and woman-woman love interest observations

# Extra: which gender is played by an older actor/actress more often?

age_gaps %>%
  mutate(same_gender=if_else(character_1_gender==character_2_gender,1,0)) %>% # creates a dummy variable that takes the value of 1 if the love interest was between characters of the same gender and 0 otherwise
  filter(same_gender==0) %>% # filters the data to keep only observations of different gender love interests
  group_by(character_1_gender) %>% # groups the data by character 1 gender
  summarise(older_partner_observations=n()) # creates a table showing how many times each gender played the oldest partner in the love interest. From it, we can observe that man are more than 4.5 times more likely to be played by an older actor

age_gaps %>%
  mutate(same_gender=if_else(character_1_gender==character_2_gender,1,0)) %>% # creates a dummy variable that takes the value of 1 if the love interest was between characters of the same gender and 0 otherwise
  filter(same_gender==0) %>% # filters the data to keep only observations of different gender love interests
  group_by(character_1_gender, release_year) %>% # groups the data by character 1 gender and year
  summarise(older_partner_observations=n()) %>% # creates a table showing how many times each gender played the oldest partner in the love interest.
  ggplot(aes(x = release_year, y = older_partner_observations, fill = character_1_gender)) + # creates a plot of how often each gender is played by an older character over the years
  geom_bar(stat = "identity", position = "fill") + # sets the plot type as a bar plot that sums up to 100%
  labs(y = "Percentage of times the older artist is of each gender") # once again, it appear that in the 1990's it started to become more often that female characters are played by artists that are older than their male character love interest pair

```

How would you explore this data set? Here are some ideas of tables/ graphs to help you with your analysis

-   How is `age_difference` distributed? What's the 'typical' `age_difference` in movies?

-   The `half plus seven\` rule. Large age disparities in relationships carry certain stigmas. One popular rule of thumb is the [half-your-age-plus-seven](https://en.wikipedia.org/wiki/Age_disparity_in_sexual_relationships#The_.22half-your-age-plus-seven.22_rule) rule. This rule states you should never date anyone under half your age plus seven, establishing a minimum boundary on whom one can date. In order for a dating relationship to be acceptable under this rule, your partner's age must be:

$$\frac{\text{Your age}}{2} + 7 < \text{Partner Age} < (\text{Your age} - 7) * 2$$ How frequently does this rule apply in this dataset?

-   Which movie has the greatest number of love interests?
-   Which actors/ actresses have the greatest number of love interests in this dataset?
-   Is the mean/median age difference staying constant over the years (1935 - 2022)?
-   How frequently does Hollywood depict same-gender love interests?

# Deliverables

There is a lot of explanatory text, comments, etc. You do not need these, so delete them and produce a stand-alone document that you could share with someone. Render the edited and completed Quarto Markdown (qmd) file as a Word document (use the "Render" button at the top of the script editor window) and upload it to Canvas. You must be commiting and pushing tour changes to your own Github repo as you go along.

# Details

-   Who did you collaborate with: -
-   Approximately how much time did you spend on this problem set: 6 hours
-   What, if anything, gave you the most trouble: getting right the graphic on Question 5 (the percentage bar plots)

**Please seek out help when you need it,** and remember the [15-minute rule](https://mam2022.netlify.app/syllabus/#the-15-minute-rule){target="_blank"}. You know enough R (and have enough examples of code from class and your readings) to be able to do this. If you get stuck, ask for help from others, post a question on Slack-- and remember that I am here to help too!

> As a true test to yourself, do you understand the code you submitted and are you able to explain it to someone else?

# Rubric

13/13: Problem set is 100% completed. Every question was attempted and answered, and most answers are correct. Code is well-documented (both self-documented and with additional comments as necessary). Used tidyverse, instead of base R. Graphs and tables are properly labelled. Analysis is clear and easy to follow, either because graphs are labeled clearly or you've written additional text to describe how you interpret the output. Multiple Github commits. Work is exceptional. I will not assign these often.

8/13: Problem set is 60--80% complete and most answers are correct. This is the expected level of performance. Solid effort. Hits all the elements. No clear mistakes. Easy to follow (both the code and the output). A few Github commits.

5/13: Problem set is less than 60% complete and/or most answers are incorrect. This indicates that you need to improve next time. I will hopefully not assign these often. Displays minimal effort. Doesn't complete all components. Code is poorly written and not documented. Uses the same type of plot for each graph, or doesn't use plots appropriate for the variables being analyzed. No Github commits.
